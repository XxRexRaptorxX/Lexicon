plugins {
    alias(libs.plugins.architectury.plugin).apply(false)
    alias(libs.plugins.architectury.loom).apply(false)
    alias(libs.plugins.idea.ext).apply(false)
    alias(libs.plugins.shadow).apply(false)
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'idea'
    apply plugin: 'maven-publish'
    apply plugin: libs.plugins.architectury.plugin.get().pluginId
    apply plugin: libs.plugins.architectury.loom.get().pluginId
    apply plugin: libs.plugins.idea.ext.get().pluginId

    project.ext {
        accessWidenerFile = rootProject.file("common/src/main/resources/${MOD_ID}.accesswidener")
    }

    group = "$MOD_GROUP.$project.name"
    version = "$MOD_VERSION+${libs.versions.minecraft.get()}"
    archivesBaseName = "$MOD_ID-$project.name"

    sourceSets.test {
        java.srcDirs = []
        resources.srcDirs = []
    }

    architectury {
        minecraft = "${libs.versions.minecraft.get()}"
    }

    loom {
        silentMojangMappingsLicense()

        if (accessWidenerFile.exists()) {
            accessWidenerPath = accessWidenerFile
        }
    }

    repositories {
        mavenLocal()
        maven {
            name = "ParchmentMC"
            url = "https://maven.parchmentmc.org"
        }

        maven {
            name = "CurseMaven"
            url = "https://www.cursemaven.com"
            content { includeGroup "curse.maven" }
        }

        maven {
            name = "Modrinth Maven"
            url = "https://api.modrinth.com/maven"
            content { includeGroup "maven.modrinth" }
        }
        maven {
            name = "BlameJared Maven"
            url = "https://maven.blamejared.com"
        }
        maven {
            name = "Fuzs Mod Resources"
            url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
        }
    }

    dependencies {
        minecraft(libs.minecraft)

        mappings(loom.layered {
            officialMojangMappings()

            if (USE_PARCHMENT_MAPPINGS == 'true') {
                parchment("org.parchmentmc.data:parchment-${libs.versions.parchment.get()}@zip")
            }
        })

        compileOnly("com.google.code.findbugs:jsr305:3.0.2")
        compileOnly("com.google.errorprone:error_prone_annotations:2.11.0")
    }

    processResources {
        project.properties.each {
            inputs.property "${it.key}", "${it.value}"
        }

        filesMatching(['*.mixins.json', 'pack.mcmeta', 'META-INF/mods.toml', 'fabric.mod.json', 'architectury.common.json']) {
            expand project.properties
        }
    }

    java {
        toolchain {
            languageVersion.set(JavaLanguageVersion.of("${libs.versions.java.get()}"))
        }
        withSourcesJar()
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
        options.release.set(JavaLanguageVersion.of("${libs.versions.java.get()}").asInt())

        javaToolchains {
            compilerFor {
                languageVersion.set(JavaLanguageVersion.of("${libs.versions.java.get()}"))
            }
        }
    }

    jar {
        manifest {
            attributes([
                    'Specification-Title'     : "${MOD_ID}",
                    'Specification-Vendor'    : "${MOD_AUTHOR}",
                    'Specification-Version'   : "${libs.versions.minecraft.get()}",
                    'Implementation-Title'    : "${project.name}",
                    'Implementation-Version'  : "${project.version}",
                    'Implementation-Vendor'   : "${MOD_AUTHOR}",
                    'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
            ])
        }
    }

    publishing {
        publications {
            mavenCommon(MavenPublication) {
                groupId = "${project.group}"
                artifactId = "${project.archivesBaseName}"
                version = "${project.version}"
                loom.disableDeprecatedPomGeneration(it)

                artifact remapJar
                artifact sourcesJar
            }
        }

        repositories {
            maven {
                url "file://${project.projectDir}/mcmodsrepo"
            }
        }
    }
}

apply plugin: libs.plugins.idea.ext.get().pluginId

idea.module {
    excludeDirs += [
            file('.idea'),
            file('.gradle'),
            file('gradle')
    ]
}